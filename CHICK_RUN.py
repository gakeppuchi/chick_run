#全体のプログラム
#ウィンドウを作るモジュールを呼び出す
from tkinter import*
import random

#ウィンドウの作成
win = Tk()
win.title('CHICK RUN')
cv = Canvas(win, width = 720, height = 480)
cv.pack()


#以下、変数
#フロアマップの変数
floor_map = [1,1,1,11,1, 1,1,12,1,1, 1,13,1,1,1, 1,1,14,1,11, 1,1,11,4,5, 1,12,3,4,5, 1,2,13,4,5, 11,2,3,14,5, 11,2,3,4,5, 11,2,3,4,5, ]

#CHICKのRUNモーションで使う変数
run_count = 0
run_motion = 0  #脚のバタつきの表現　
run_posture = 0 #走る姿勢の表現
jump_sw = 0     #ジャンプのスィッチ　 0:off  1:on
jump_count = 0

#得点に関する変数
score = 0
hi_score = 0

#STEPに関する変数 READY,PLAY,GAMEOVER
step = 1
map_control = 40
cool_down = 0
start = 0


#以下、関数
#キー操作を確認する関数
def input_key1(event):
    global run_posture
    global start
    run_posture = 1
    start = 1

def release_key1(event):
    global run_posture
    run_posture = 0

def input_key2(event):
    global jump_sw
    global jump_count
    if jump_count == 0:
        jump_sw =  0

def release_key2(event):
    global jump_sw
    global jump_count
    if jump_count == 0: 
        jump_sw = 1
    else:
        jump_sw = 3

win.bind('<KeyPress-1>',input_key1)
win.bind('<KeyRelease-1>',release_key1)
win.bind('<KeyPress-2>',input_key2)
win.bind('<KeyRelease-2>',release_key2)

#キャンパスの描画関数
def draw_screen():
    #画面クリア
    cv.delete('all')
    #キャンバスの作成
    cv.create_rectangle(  0,  0, 720, 480, fill="white", width = 0 )

#STEPに関する関数
def STEP():
    global step
    global map_control
    global cool_down
    global score
    global start
    if step == 1:
        map_control = 40
        score = 0
        cv.create_text     ( 370, 170, text="PRESS   key-1   START", font=("Helvetica", 20, "bold") )
        if start == 1:
            step = 2
    if step == 2:
        map_control = 42
    if step == 3:
        map_control = 40
        start = 0
        cv.create_text     ( 390, 170, text="GAME OVER", font=("Helvetica", 50, "bold") )
        cool_down = cool_down +1
        if cool_down == 80:
            step = 1
            cool_down = 0

#当たり判定の関数
def JUDGE():
    global step
    global score
    global run_posture
    global jumpn_sw
    if (floor_map[3]== 41) and (( 18 <= jump_count ) or ( jump_count <= 4 )):
        step = 3
    if (floor_map[8]== 42) and ( run_posture == 1 )and ( jump_count == 0 ):
        floor_map[8]= 1
        score = score + 100
        
#走るモーションの関数
def hasiru():
    global run_count
    global run_motion
    run_count = run_count +1
    if run_count == 3:
        run_count = 1
        run_motion = run_motion +1
    if run_motion == 2:
        run_motion = 0
        
#得点の関数
def SCORE():
    global score
    global hi_score
    global step 
    if step == 1:
        score = 0
    if step == 2:
        score = score +1
    if score >= hi_score:
        hi_score = score
    cv.create_text     ( 450, 50, text="SCORE",      font=("Helvetica", 20, "bold") )
    cv.create_text     ( 600, 50, text=score,        font=("Helvetica", 20, "bold") )
    cv.create_text     ( 450, 20, text="HI SCORE",   font=("Helvetica", 15, "bold") )
    cv.create_text     ( 600, 20, text=hi_score,     font=("Helvetica", 20, "bold") )

#FLOOR描画関数
def FLOOR():
    new_map = random.randint(1,map_control)
    floor_map.append(new_map)
    del floor_map[0]
    cv.create_text     ( 340, 380, text="PRESS",      font=("Helvetica", 13) )
    cv.create_text     ( 280, 380, text="key-1",      font=("Helvetica", 13) )
    cv.create_text     ( 441, 380, text=":   Peck at",font=("Helvetica", 13) )
    cv.create_text     ( 350, 410, text="RELEASE",    font=("Helvetica", 13) )
    cv.create_text     ( 280, 410, text="key-2",      font=("Helvetica", 13) )
    cv.create_text     ( 435, 410, text=":   Jump",   font=("Helvetica", 13) )
    for j in range(0,39):
        if floor_map[j] <= 10 :
            for i in range(0,12):
                if floor1_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280,   ((i%3)*5)+5+70+(15*j),(int(i/3)*5)+5+280, fill="black" , width=0)
        if 11 <= floor_map[j] <= 20:
            for i in range(0,12):
                if floor2_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280,   ((i%3)*5)+5+70+(15*j), (int(i/3)*5)+5+280, fill="black" ,width=0)
        if 21 <= floor_map[j] <= 30:
            for i in range(0,12):
                if floor3_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280,   ((i%3)*5)+5+70+(15*j), (int(i/3)*5)+5+280, fill="black" ,width=0)
        if 31 <= floor_map[j] <= 40:
            for i in range(0,12):
                if floor4_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280,   ((i%3)*5)+5+70+(15*j), (int(i/3)*5)+5+280, fill="black" ,width=0)
        if floor_map[j] == 41: 
            for i in range(0,39):
                if wall_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280-45, ((i%3)*5)+5+70+(15*j), (int(i/3)*5)+5+280-45, fill="black" ,width=0)
        if floor_map[j] == 42: 
            for i in range(0,12):
                if floor4_img[i] == 1:
                    cv.create_rectangle((i%3)*5+70+(15*j), int(i/3)*5+280,    ((i%3)*5)+5+70+(15*j), (int(i/3)*5)+5+280, fill="black" ,width=0)
            for i in range(0,41):
                if HEART_img[i] == 1:
                    cv.create_rectangle((i%7)*5+70+(15*j), int(i/7)*5+280-45, ((i%7)*5)+5+70+(15*j), (int(i/7)*5)+5+280-45, fill="black" ,width=0)
#CHICKドット絵描画関数
def CHICK_RUN():
    global run_posture 
    global jump_count
    global jump_sw
    if jump_sw == 1:
        jump_count = jump_count + 1
        jump_sw =2
    if jump_count >= 1:
        if jump_sw == 3:
            jump_count = 5
            jump_sw = 2
        jump_count = jump_count + 1
        if 1 <= jump_count <= 3:
            for i in range(1,342):
                if JUMP1_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-30,((i%19)*5)+5+100, (int(i/19)*5)+5+200-30, fill="black",width=0)
        if 4 <= jump_count <= 6:
            for i in range(1,342):
                if JUMP1_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-51,((i%19)*5)+5+100, (int(i/19)*5)+5+200-51, fill="black",width=0)
        if 7 <= jump_count <= 9:
            for i in range(1,342):
                if JUMP1_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-66,((i%19)*5)+5+100, (int(i/19)*5)+5+200-66, fill="black",width=0)
        if 10 <= jump_count <= 12:
            for i in range(1,342):
                if JUMP1_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-75,((i%19)*5)+5+100, (int(i/19)*5)+5+200-75, fill="black",width=0)
        if 13 <= jump_count <= 15:
            for i in range(1,342):
                if JUMP2_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-66,((i%19)*5)+5+100, (int(i/19)*5)+5+200-66, fill="black",width=0)
        if 16 <= jump_count <= 18:
            for i in range(1,342):
                if JUMP2_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-51,((i%19)*5)+5+100, (int(i/19)*5)+5+200-51, fill="black",width=0)
        if 19 <= jump_count <= 21:
            for i in range(1,342):
                if JUMP2_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200-30,((i%19)*5)+5+100, (int(i/19)*5)+5+200-30, fill="black",width=0)
        if jump_count >= 22:
            jump_count = 0
            junp_sw = 0
            for i in range(1,342):
                if JUMP2_img[i] == 1:
                    cv.create_rectangle((i%19)*5+100, int(i/19)*5+200, ((i%19)*5)+5+100, (int(i/19)*5)+5+200, fill="black",width=0)
    else:
        for i in range(1,399):
            if RUN_img[run_posture][run_motion][i] == 1:
                cv.create_rectangle((i%21)*5+100, int(i/21)*5+200, ((i%21)*5)+5+100, (int(i/21)*5)+5+200, fill="black",width=0)
            if RUN_img[run_posture][run_motion][i] == 2:
                cv.create_rectangle((i%21)*5+100, int(i/21)*5+200, ((i%21)*5)+5+100, (int(i/21)*5)+5+200, fill="white",width=0)

#ゲームの繰り返し処理の関数
def game_loop():
    draw_screen()
    STEP()
    JUDGE()
    hasiru()
    SCORE()
    FLOOR()
    CHICK_RUN()
    win.after(50, game_loop)

#以下、ドット絵データ
#ひよこの動きイメージ
JUMP1_img = [0,0,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,0,0,0,
             0,0,0,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,0,0,0, 0,0,1,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,1,0,0,
             0,0,0,0,1, 0,1,1,1,1, 0,1,1,1,1, 1,0,1,0,

             0,0,0,1,0, 1,1,1,1,1, 1,1,1,1,1, 0,0,0,1,
             1,1,1,0,1, 0,1,1,1,1, 1,1,1,1,1, 1,0,1,0,
             1,1,1,0,1, 1,0,1,1,1, 1,1,1,1,1, 1,1,0,0,
             1,1,1,0,1, 1,1,0,1,1, 1,1,1,1,1, 1,1,0,0,
             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,

             0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,
             0,0,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,
             0,0,0,1,1, 1,1,1,1,1, 1,1,1,1,1, 0,0,0,0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,

             0,0,0,1,0, 1,1,0,0,0, 0,0,1,1,0, 1,0,0,0,
             0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,]
           
JUMP2_img = [0,0,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,0,0,0,
             0,0,0,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,0,0,0, 0,0,1,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,1,0,0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,0,1,0,

             0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,1, 0,0,0,1,
             0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,1,0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,0,1,1, 1,1,0,1,1, 1,1,1,1,1, 1,1,0,0,
             0,0,1,1,1, 1,0,1,1,1, 1,1,1,1,1, 1,1,0,0,

             0,1,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,0,0,0,
             1,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,
             1,1,1,1,0, 0,0,0,1,1, 1,1,1,1,1, 0,0,0,0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,

             0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,
             0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,
             0,0,0,0,0, 1,1,0,0,1, 1,0,0,0,0, 0,0,0,0,]

RUN_img = [[[0,0,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,0,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,0,1,0,0, 0,

             0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 0,0,0,1,0, 0,
             1,1,0,0,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,1,0,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 0,0,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,2,2, 1,2,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,1,2, 1,1,2,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,2,2,2, 2,2,2,0,0, 0,0,0,0,0, 0,],

            [0,0,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,0,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 0,1,1,1,1, 1,0,1,0,0, 0,

             0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 0,0,0,1,0, 0,
             1,1,0,0,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,1,0,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,0,0,0,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 0,0,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,2,0,0, 0,2,1,2,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,1,2,0, 0,2,1,1,2, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,2,2,2,0, 0,2,2,2,2, 0,0,0,0,0, 0,],],
             
          [ [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,

             0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,0,1,1, 1,1,1,1,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,0,1,1, 1,1,1,0,1, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 1,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,0,1, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,2,2, 1,2,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,1,2, 1,1,2,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,2,2,2, 2,2,2,0,0, 0,0,0,0,0, 0,],

           [ 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,

             0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,0,1,1, 1,1,1,1,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,0,1,1, 1,1,1,0,1, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 1,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,0,1, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,2,0,0, 0,2,1,2,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,1,2,0, 0,2,1,1,2, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,2,2,2,0, 0,2,2,2,2, 0,0,0,0,0, 0,],],]
             

RUN_3_img = [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,

             0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,0,1,1, 1,1,1,1,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,0,1,1, 1,1,1,0,1, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 1,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,0,1, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,2,2, 1,2,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,2,1,1,2, 1,1,2,0,0, 0,0,0,0,0, 0,]
    
RUN_4_img =[ 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,

             0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,0,0,0, 0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             1,1,1,1,1, 1,1,1,1,1, 1,1,0,1,1, 1,1,1,1,0, 0,
             1,1,1,0,0, 0,0,0,1,1, 1,1,0,1,1, 1,1,1,0,1, 0,
             0,1,1,0,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,0,0,0, 1,

             0,1,1,1,0, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,0,1, 0,
             0,0,1,1,1, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,0, 0,
             0,0,0,1,1, 1,0,0,1,1, 1,1,1,1,1, 1,1,0,0,0, 0,
             0,0,0,0,1, 1,1,1,1,1, 1,1,1,1,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 0,1,1,1,1, 1,1,1,0,0, 0,0,0,0,0, 0,

             0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,2,0,0, 0,2,1,2,0, 0,0,0,0,0, 0,
             0,0,0,0,0, 2,1,1,2,0, 0,2,1,1,2, 0,0,0,0,0, 0,]

#ハートのイメージ
HEART_img = [0,1,1,0,1, 1,0,
             1,1,1,1,1, 1,1,
             1,1,1,1,1, 1,1,
             0,1,1,1,1, 1,0,
             0,0,1,1,1, 0,0,

             0,0,0,1,0, 0,0,]

#床と障害物のイメージ
floor1_img = [0,0,0, 1,1,1, 1,1,1, 1,1,1,]
floor2_img = [0,0,0, 1,0,1, 1,1,1, 1,1,1,]
floor3_img = [0,0,0, 0,1,1, 1,1,1, 1,1,1,]
floor4_img = [0,1,0, 0,1,1, 1,1,1, 1,1,1,]
wall_img   = [1,1,1, 1,0,1, 1,1,1, 1,0,1, 1,1,1, 1,0,1, 1,1,1, 1,0,1, 1,1,1, 1,0,1, 1,1,1, 1,1,1, 1,1,1,]

           
#繰り返し処理の実行
game_loop()
#ウィンドウの表示
win.mainloop()
